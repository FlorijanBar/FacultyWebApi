// <auto-generated />
using System;
using FacultetApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FacultyWebApi.Migrations
{
    [DbContext(typeof(FacultyDbContext))]
    [Migration("20230327094239_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FacultetApi.Models.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("FacultetApi.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countys");
                });

            modelBuilder.Entity("FacultetApi.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("FacultetApi.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Facultys");
                });

            modelBuilder.Entity("FacultetApi.Models.FacultyStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudyId");

                    b.ToTable("FacultyStudys");
                });

            modelBuilder.Entity("FacultetApi.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("FacultetApi.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StudyId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("FacultetApi.Models.StudentCollege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentColleges");
                });

            modelBuilder.Entity("FacultetApi.Models.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Studys");
                });

            modelBuilder.Entity("FacultetApi.Models.College", b =>
                {
                    b.HasOne("FacultetApi.Models.Employer", "Employer")
                        .WithMany("College")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("FacultetApi.Models.Employer", b =>
                {
                    b.HasOne("FacultetApi.Models.Faculty", "Faculty")
                        .WithMany("Employer")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultetApi.Models.Place", "Place")
                        .WithMany("Employer")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("FacultetApi.Models.Faculty", b =>
                {
                    b.HasOne("FacultetApi.Models.Place", "Place")
                        .WithMany("Faculty")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("FacultetApi.Models.FacultyStudy", b =>
                {
                    b.HasOne("FacultetApi.Models.Faculty", "Faculty")
                        .WithMany("FacultyStudy")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultetApi.Models.Study", "Study")
                        .WithMany("FacultyStudy")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("FacultetApi.Models.Place", b =>
                {
                    b.HasOne("FacultetApi.Models.County", null)
                        .WithMany("Place")
                        .HasForeignKey("CountyId");
                });

            modelBuilder.Entity("FacultetApi.Models.Student", b =>
                {
                    b.HasOne("FacultetApi.Models.Place", "Place")
                        .WithMany("Student")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultetApi.Models.Study", "Study")
                        .WithMany("Student")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("FacultetApi.Models.StudentCollege", b =>
                {
                    b.HasOne("FacultetApi.Models.College", "College")
                        .WithMany("StudentCollege")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultetApi.Models.Student", "Student")
                        .WithMany("StudentCollege")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FacultetApi.Models.College", b =>
                {
                    b.Navigation("StudentCollege");
                });

            modelBuilder.Entity("FacultetApi.Models.County", b =>
                {
                    b.Navigation("Place");
                });

            modelBuilder.Entity("FacultetApi.Models.Employer", b =>
                {
                    b.Navigation("College");
                });

            modelBuilder.Entity("FacultetApi.Models.Faculty", b =>
                {
                    b.Navigation("Employer");

                    b.Navigation("FacultyStudy");
                });

            modelBuilder.Entity("FacultetApi.Models.Place", b =>
                {
                    b.Navigation("Employer");

                    b.Navigation("Faculty");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FacultetApi.Models.Student", b =>
                {
                    b.Navigation("StudentCollege");
                });

            modelBuilder.Entity("FacultetApi.Models.Study", b =>
                {
                    b.Navigation("FacultyStudy");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
